/*
    ToDos:
    - layer und My Work react on hover, how to do it on touchscreen? maybe something like: "click to see more"
    - how to test locally on mobile device
    - page width is too big for mobile: scroll bar shows up
    */

*{
  margin: 0;
  padding: 0;
  font-family: 'Poppins', sans-serif; /* the font family is set to 'Poppins', which is a specific typeface or font. If the browser does not have 'Poppins' installed on the user's system, it will use a fallback font specified by the "sans-serif" keyword. The "sans-serif" keyword is a generic font family that refers to any font without serifs (the small decorative lines at the end of strokes in letters), which includes popular fonts such as Arial, Helvetica, and Verdana. */
  box-sizing: border-box; /*By default, when we specify the width or height of an HTML element using CSS, the browser calculates those values based on the content width and height plus any padding and border that is added to the element. This can sometimes lead to unexpected layout issues, especially when dealing with responsive design. The "box-sizing" property allows us to change this default behavior. When "box-sizing" is set to "border-box", the width and height values specified for an element include the content, padding, and border, all within the specified dimensions. This ensures that the total size of the box remains constant, regardless of how much padding or border is added. */
}
html{
  overflow-x: hidden; /* Hide horizontal scrollbar */
}
body{
  background: #080808;
  color: #fff;
 overflow-x: hidden; /* Hide horizontal scrollbar added on body and html, to prevent page scrolling left/right */
}
#header{
  width: 100%;
  height: 1000px;
  max-height: 100vh; /* topin: should be deleted, because otherwise the background image goes into the left side */
  max-height: -webkit-fill-available;
  background-image: url(images/background_image.png);
  background-size: cover;
  background-position: center;
}

.container{
    padding: 10px 10%;
  }

    nav{
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;

    }
      .logo{
        width: clamp(50px, 16vw, 140px);
      }
      nav ul li{
        display: inline-block; /* horizontal alignment */
        margin: 10px 20px;
      }
        nav ul li a{
          color: #fff;
          text-decoration: none;
          font-size: clamp(1rem, 1vw + 0.5rem, 1.2rem);
          position: relative; /* relative for the underline */
        }
        nav ul li a::after{
          content: '';
          width: 0;
          height: 3px;
          background: #ff004f;
          position: absolute; /* absolute to the a tag */
          left: 0;
          bottom: -6px;
          transition: 0.5s;
        }
        nav ul li a:hover::after{
          width: 100%;
        }
    .header-text{
      margin-top: 20px;
      font-size: clamp(1rem, 3vw + 0.5rem, 2rem);
      max-width: 50vw;
    }
      .header-text h1{
        font-size: clamp(1rem, 5vw + 0.5rem, 3rem);
        margin-top: 20px;
      }
      .header-text h1 span{
        color: #ff004f;
      }

/******************* about section ****************/
#about{
  padding: 30px 0;
}
  .row{
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  }
    .about-col-1{
      flex-basis: 35%; /* The width of the column will be 35%. When flex-basis is set to 50%, it means that the initial main size of the flex item will be 50% of the width or height of its containing blockï¿½s content area. https://youtu.be/jx4FtPlDXJg */
    }
      .about-col-1 img{
        border-radius: 15px;
        width: 100%;
        transition: transform 0.5s;
      }
      .about-col-1 img:hover{
        transform: scale(1.5);
      }
    .about-col-2{
      flex-basis: 60%;
    }
      .sub-title{
        font-size: clamp(1rem, 5vw + 0.5rem, 5rem);
        font-weight: 600;
      }
      .tab-titles{
        display: flex;
        margin: 20px 0 40px 0;
      }
        .tab-links{
          margin: 0 50px 0 0;
          font-size: 1.1rem;
          font-weight: 600;
          cursor: pointer;
          position: relative;
        }
        .tab-links::after{
          content: '';
          width:0;
          height: 3px;
          background: #ff004f;
          position: absolute;
          left: 0;
          bottom: -8px;
          transition: 0.5s;
        }
        .tab-links.active-link::after{
          width: 50%;
        }
      .tab-contents{
        display: none;
      }
      .tab-contents.active-tab{
        display: block;
      }
        .tab-contents ul li{
          list-style: none;
          margin: 15px 0 0 0;
        }
          .tab-contents ul li span{
            color: #81062d;
            font-size: 0.9rem;
            font-weight: 600;
          }
/* ****************services *************/
#services{
  padding: 30px 0;
}
.services-list{
  display: grid;
  /*
  The grid-template-columns property specifies the size and number of columns in a grid layout. 
  The value repeat(auto-fit, minmax(250px, 1fr)) 
    The repeat function takes two arguments: the first argument specifies the number of times to repeat the pattern, and the second argument specifies the pattern to repeat.
  That means that the grid will create as many columns as can fit in the container, 
  with a minimum size of 250px and a maximum size of 1fr. 
    The auto-fit keyword tells the grid to automatically fit the columns into the available space. 
    The minmax() function sets the minimum and maximum size of the columns. 
    
    In this case, the minimum size is 250px and the maximum size is 1fr, which means that the column will take up one fraction of the available space.
  fr is a unit of measurement in CSS that represents a fraction of the available space in a grid container. 
    For example, if you have a grid container with three columns and you set grid-template-columns: 1fr 2fr 1fr, the middle column will take up twice as much space as the other two columns.
  */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  /* grid-gap is a shorthand property in CSS that specifies the size of the gap between rows and columns in a grid layout. It can take one or two values: if you provide one value, it will set the size of the gap between both rows and columns; if you provide two values, the first value will set the size of the row gap and the second value will set the size of the column gap.
  For example, if you have a grid container and you set grid-gap: 10px 20px, it means that there will be a 10px gap between rows and a 20px gap between columns.
  Note that grid-gap is a shorthand property for grid-row-gap and grid-column-gap, which can be used to set the size of the row and column gaps separately. */
  grid-gap: 40px;
  margin: 20px 0;
}
.services-list div{
  background: #262626;
  padding: 40px;
  font-size: 0.9rem;
  font-weight: 300;
  border-radius: 10px;
  transition: 0.5s;
}
.services-list div:hover{
  background: #310010;
  transform: translateY(-10px);
}
.services-list div i{
  font-size: 40px;
}
.services-list div h2{
  font-size: 2rem;
  margin-bottom: 15px;
  font-weight: 600;
}
/* not make only the link but the whole grid element click able (href)*/
.services-list div a{
  text-decoration: none;
  color: #fff;  
  font-size: 0.8rem;
  margin-top: 20px;
  display: block; /* a tag is an inline element, so we have to change its display property to block/inline-block. The difference between block and inline-block is, that inline-block does not add a line-break after the element */
  transition: 0.5s;
}
.services-list div a:hover{
  text-decoration: underline;
}
/* *******************portfolio **************** */
#portfolio{
  padding: 50px 0;
}
.work-list{
  display: grid;
  /*
  The grid-template-columns property specifies the size and number of columns in a grid layout. 
  The value repeat(auto-fit, minmax(250px, 1fr)) 
    The repeat function takes two arguments: the first argument specifies the number of times to repeat the pattern, and the second argument specifies the pattern to repeat.
  That means that the grid will create as many columns as can fit in the container, 
  with a minimum size of 250px and a maximum size of 1fr. 
    The auto-fit keyword tells the grid to automatically fit the columns into the available space. 
    The minmax() function sets the minimum and maximum size of the columns. 
    
    In this case, the minimum size is 250px and the maximum size is 1fr, which means that the column will take up one fraction of the available space.
  fr is a unit of measurement in CSS that represents a fraction of the available space in a grid container. 
    For example, if you have a grid container with three columns and you set grid-template-columns: 1fr 2fr 1fr, the middle column will take up twice as much space as the other two columns.
  */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  /* grid-gap is a shorthand property in CSS that specifies the size of the gap between rows and columns in a grid layout. It can take one or two values: if you provide one value, it will set the size of the gap between both rows and columns; if you provide two values, the first value will set the size of the row gap and the second value will set the size of the column gap.
  For example, if you have a grid container and you set grid-gap: 10px 20px, it means that there will be a 10px gap between rows and a 20px gap between columns.
  Note that grid-gap is a shorthand property for grid-row-gap and grid-column-gap, which can be used to set the size of the row and column gaps separately. */
  grid-gap: 40px;
  margin: 20px 0;
}
.work{
  border-radius: 15px;
  position: relative;
  overflow: hidden;
}
.work img{
  width: 100%;
  border-radius: 10px;
  display: block;
  transition: transform 0.5s;
}
.work:hover img{
  transform: scale(1.1);
}
.work .layer{
  width: 100%;
  height: 0;
  background: linear-gradient(rgba(0, 0, 0, 0.496), #81062d);
  position: absolute;
    left: 0;
    bottom: 0;
  overflow: hidden;
  display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
  padding: 0 40px;
  text-align: center;
  transition: height 0.5s;
}
.work:hover .layer{
  height: 100%;
}
.layer h3{
  font-weight: 600;
  font-size: 1.1rem;
}
.layer p{
  font-weight: 600;
  font-size: 0.9rem;
}
.layer a{
  margin-top: 20px;
  color: #81062d;
  text-decoration: none;
  font-size: 1.1rem;
  line-height: 60px;
  background: #fff;
  width: 60px;
  height: 60px;
  border-radius: 50%;
}
.btn{
  display: block;
  margin: 50px auto;
  width: -moz-fit-content;
  width: fit-content;
  border: 1px solid #81062d;
  padding: 14px 50px;
  border-radius: 5px;
  text-decoration: none;
  color: #fff;
  transition: background 0.3s;
  text-align: center;
}
.btn:hover{
  background: #81062d;
}
/* ********** contact ***********/
.contact-left{
  min-width: 210px;
}
  .contact-left p{
    margin-top: 30px;
  }
    .contact-left p i{
      color: #ff004f;
      margin-right: 15px;
      font-size: 1.5rem;
    }
    .social-icons{
      margin-top: 30px;
    }
    .social-icons a{
      text-decoration: none;
      font-size: 1.5rem;
      margin-right: 15px;
      color: #ababab;
      display: inline-block; /* inline: the icons are inline, block: each block can be given a height.*/
      transition: transform 0.5s;
    }
    .social-icons a:hover{
      color: #ff004f;
      transform: scale(1.5);
    }
    .btn.btn2{
      display: inline-block;
      background-color: #81062d;
    }
.contact-right{
  /* flex-basis: 100%; */
  min-width: 100px;
  width: calc(30vw + 200px);
  max-width: 100%; 
}
.contact-right form{
  width: 100%;
}
form input, form textarea{
  width: 100%;
  border: 0;
  outline: none;
  background: #262626;
  padding: calc(0.5rem + 1vw);
  margin: 1rem 0.5rem 1rem 0.5rem;
  color: #fff;
  font-size: 1.1rem;
  border-radius: 6px
}
form .btn2{
  padding: 14PX 60px;
  font-size: 1.1rem;
  margin-top: 20px;
  cursor: pointer;
}
